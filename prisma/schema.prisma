// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Gender {
    Male
    Female
    Other
}

enum LengthUnit {
    cm
    ft
}

enum WeightUnit {
    kg
    lb
}

enum Plan {
    Premium
    Free
    Expired
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(auto()) @map("_id") @db.ObjectId
    userId                   String  @db.ObjectId
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    gender        Gender?
    birthDay      DateTime?
    lengthUnit    LengthUnit  @default(cm)
    weightUnit    WeightUnit  @default(kg)
    height        Float?
    weight        Float?
    isSetup       Boolean     @default(false)
    accounts      Account[]
    sessions      Session[]
    foodEntries   FoodEntry[]
    createdAt     DateTime?   @default(now())
    plan          Plan        @default(Free)
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

type FoodNutrient {
    nCode    String
    name     String
    unitName String
    amount   Float
}

type FoodCategory {
    cId         Int
    description String
}

type FoodPortion {
    gramWeight         Float
    sequenceNumber     Int
    portionDescription String
}

model Food {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    description   String
    foodNutrients FoodNutrient[]
    foodCategory  FoodCategory
    foodPortions  FoodPortion[]
}

type FoodData {
    foodId            String         @db.ObjectId
    selectedPortions  String
    quantity          String
    comsumedNutrients FoodNutrient[]
}

model FoodEntry {
    id       String     @id @default(auto()) @map("_id") @db.ObjectId
    userId   String     @db.ObjectId
    foodData FoodData[]
    time     DateTime
    user     User       @relation(fields: [userId], references: [id])
}
